# .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        shell: bash
        run: |
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          changelog=$(git log ${previous_tag}..HEAD --pretty=format:"* %s%n")
          echo "CHANGELOG<<CHANGELOGEOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "CHANGELOGEOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Installation

            Download the appropriate binary for your platform:
            - Windows: `dircat-windows.exe`
            - Linux (x86_64): `dircat-linux-x86_64`
            - Linux (ARM64): `dircat-linux-arm64`
            - macOS (x86_64): `dircat-macos-x86_64`
            - macOS (ARM64): `dircat-macos-arm64`
          draft: true
          prerelease: true

  build-and-upload:
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: dircat-linux-x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            artifact_name: dircat-linux-arm64
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            artifact_name: dircat-windows.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            artifact_name: dircat-macos-x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            artifact_name: dircat-macos-arm64
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Install ARM cross-compilation tools (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Configure CMake for Linux x86_64
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake for Linux ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++

      - name: Configure CMake for Windows
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake for macOS x86_64
        if: matrix.target == 'x86_64-apple-darwin'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake for macOS ARM64
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Darwin \
          -DCMAKE_OSX_ARCHITECTURES=arm64

      - name: Test
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        shell: bash
        run: |
          cmake --build build --config Release --target dircat_test
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./build/Release/dircat_test.exe
          else
            ./build/dircat_test
          fi

      - name: Build dircat
        run: cmake --build build --config Release --target dircat

      - name: Prepare Binary
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp build/Release/dircat.exe ${{ matrix.artifact_name }}
          else
            cp build/dircat ${{ matrix.artifact_name }}
            chmod +x ${{ matrix.artifact_name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream